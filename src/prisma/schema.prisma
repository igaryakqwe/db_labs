generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model action {
  id       Int
  date     DateTime @db.Date
  Poll_id  Int
  Grant_id Int
  State_id Int
  grant    grant    @relation(fields: [Grant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Action_Grant1")
  poll     poll     @relation(fields: [Poll_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Action_Poll1")
  state    state    @relation(fields: [State_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Action_State1")

  @@id([id, Poll_id, Grant_id, State_id])
  @@index([Grant_id], map: "fk_Action_Grant1_idx")
  @@index([Poll_id], map: "fk_Action_Poll1_idx")
  @@index([State_id], map: "fk_Action_State1_idx")
}

model answer {
  id          Int
  field       Bytes    @db.Blob
  Question_id Int
  question    question @relation(fields: [Question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Answer_Question")
  grant       grant[]

  @@id([id, Question_id])
  @@index([Question_id], map: "fk_Answer_Question_idx")
}

model earnedmoney {
  id       Int      @default(autoincrement())
  date     DateTime @db.Date
  amount   Int
  tookAway Int      @db.TinyInt
  User_id  Int
  Poll_id  Int
  poll     poll     @relation(fields: [Poll_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_EarnedMoney_Poll1")
  user     user     @relation(fields: [User_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_EarnedMoney_User1")

  @@id([id, User_id, Poll_id])
  @@index([Poll_id], map: "fk_EarnedMoney_Poll1_idx")
  @@index([User_id], map: "fk_EarnedMoney_User1_idx")
}

model grant {
  id                 Int  @unique
  assignedAt         DateTime @db.Date
  Role_id            Int
  User_id            Int
  Answer_id          Int?
  Answer_Question_id Int?
  Poll_id            Int?
  action             action[]
  answer             answer?  @relation(fields: [Answer_id, Answer_Question_id], references: [id, Question_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Grant_Answer1")
  poll               poll?    @relation(fields: [Poll_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Grant_Poll1")
  role               role     @relation(fields: [Role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Grant_Role1")
  user               user     @relation(fields: [User_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Grant_User1")

  @@id([id, Role_id, User_id])
  @@index([Answer_id, Answer_Question_id], map: "fk_Grant_Answer1_idx")
  @@index([Poll_id], map: "fk_Grant_Poll1_idx")
  @@index([Role_id], map: "fk_Grant_Role1_idx")
  @@index([User_id], map: "fk_Grant_User1_idx")
}

model poll {
  id          Int           @id
  title       String        @db.MediumText
  description String        @db.LongText
  action      action[]
  earnedmoney earnedmoney[]
  grant       grant[]
  question    question[]
}

model qualification {
  id           Int
  level        Int
  User_id      Int
  Specialty_id Int
  specialty    specialty @relation(fields: [Specialty_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Qualification_Specialty1")
  user         user      @relation(fields: [User_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Qualification_User1")

  @@id([id, User_id, Specialty_id])
  @@index([Specialty_id], map: "fk_Qualification_Specialty1_idx")
  @@index([User_id], map: "fk_Qualification_User1_idx")
}

model question {
  id      Int @unique
  type    String   @db.MediumText
  text    String   @db.LongText
  Poll_id Int
  answer  answer[]
  poll    poll     @relation(fields: [Poll_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Question_Poll1")

  @@id([id, Poll_id])
  @@index([Poll_id], map: "fk_Question_Poll1_idx")
}

model role {
  id    Int     @id
  name  String  @db.TinyText
  grant grant[]
}

model specialty {
  id            Int             @id
  name          String          @db.MediumText
  qualification qualification[]
}

model state {
  id     Int      @id
  text   String   @db.LongText
  type   String   @db.MediumText
  action action[]
}

model user {
  id            Int             @id @default(autoincrement())
  mail          String          @db.MediumText
  password      String          @db.MediumText
  name          String          @db.MediumText
  age           Int?
  gender        String?         @db.MediumText
  earnedmoney   earnedmoney[]
  grant         grant[]
  qualification qualification[]
}
